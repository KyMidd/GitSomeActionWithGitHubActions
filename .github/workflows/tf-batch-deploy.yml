name: Terraform Batch Deploy

on:
  # Permit targeted manual trigger within console
  workflow_dispatch:
    inputs:
      pod-selection-regex:
        description: Regex to match pods to deploy, e.g. "s00[1-5]", user asterisk (*) to select all PODS
        type: string
        required: true
        default: '*'
      layer-to-trigger:
        description: Layer to trigger, e.g. "network", "db"
        type: choice
        required: true
        options:
          - network
          - db
      # strategy:
      #   description: Deploy strategy, concurrent or sequential
      #   type: choice
      #   required: true
      #   options:
      #     - concurrent
      #     - sequential

jobs:
  
  trigger-deploy:
    name: TF Batch Trigger Deploy
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Define deploy strategy
      id: set-deploy-strategy
      run: |
        # If strategy is concurrent, max parallel is set to 100 (arbitrarily high number)
        if [[ ${{ github.event.inputs.strategy }} == "concurrent" ]]; then
          echo "Concurrent deployment strategy selected, max parallel set to 100"
          echo "MAX_PARALLEL_DEPLOY=100" >> $GITHUB_OUTPUT

        # If strategy is sequential, max parallel is set to 1
        elif [[ ${{ github.event.inputs.strategy }} == "sequential" ]]; then
          echo "Concurrent deployment strategy selected, max parallel set to 100"
          echo "MAX_PARALLEL_DEPLOY=1" >> $GITHUB_OUTPUT
        fi

    - name: Specify pods to deploy
      id: set-pod-selection
      run: |
        
        ###
        ## Because I can't figure out how to make synthetic json with jq, I'm going to do it the hard way
        ## This is an awful hack, and should be replaced with a sane solution
        ###

        # Make an array object
        ALL_PODS=$(ls -l data/ | grep -Ev 'total' | rev | cut -d " " -f1 | rev | cut -d "." -f 1)

        # Filter PODS using regex
        # If wildcard used to select all pods, select all PODS
        if [[ -n ${{ github.event.inputs.pod-selection-regex }} ]]; then
          echo "Filtering pods with regex ${{ github.event.inputs.pod-selection-regex }}"
          ALL_PODS=$(echo "$ALL_PODS" | grep -E "${{ github.event.inputs.pod-selection-regex }}" )
        fi
        
        # Print out list of pods we'll be targeting
        echo "We'll be targeting the following pods:"
        while IFS=$'\n' read -r POD; do
          echo "- $POD"
        done <<< "$ALL_PODS"

    - name: Trigger deploy
      id: trigger-deploy
      env:
        GITHUB_TOKEN: ${{ secrets.PROEHR_GITHUB_TOKEN }}
      run: |
        echo "Trigger deploy on all selected pods"

        # Set vars based on layer-to-trigger input
        if [[ ${{ github.event.inputs.layer-to-trigger }} == "network" ]]; then
          REPO=az-tf-ph-common-network
          WORKFLOW_ID=tf-deploy.yml
          URL=''
        elif [[ ${{ github.event.inputs.layer-to-trigger }} == "db" ]]; then
          REPO=az-tf-ph-common-db
          WORKFLOW_ID=tf-deploy.yml
        fi

        while IFS=$'\n' read -r POD; do
          TRIGGER=$(curl -sL \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN"\
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/Pro-EHR/$REPO/actions/workflows/$WORKFLOW_ID/dispatches \
            -d "
              { \"ref\" : \"feature/SDO-1-Misc-fixes-TF-Apply\",
                \"inputs\":{
                  \"location\" : \"$LOCATION\"
                }
              }"
            )
          
            # Check if trigger was successful
            if [[ $(echo "$TRIGGER" | awk NF | wc -l | xargs) == 0 ]]; then
              echo "ðŸš€ Triggered deploy on ${LOCATION} on ${{ github.event.inputs.layer-to-trigger }} layer"
            else
              echo "Failed to trigger deploy on $POD"
              echo "Error: for Location ${LOCATION}: $(echo "$TRIGGER" | jq -r .message)"
            fi
        done <<< "$ALL_PODS"


        # # Iterate over the array with while, build pseudo-json
        # rm tmp.json
        # while IFS=$'\n' read -r POD; do
        #   echo "{\"location\":\"$POD\"}" >> tmp.json
        # done <<< "$ALL_PODS"

        # # Read the json file back into mem - valid json
        # SEPARATE_LINES_POD_LOCATIONS=$(cat tmp.json| tr -d "\r\n" | sed -e 's/}{/},{/g')

        # # Add string to beginning of comma join string
        # ADD_BEGINNING=$(echo "$SEPARATE_LINES_POD_LOCATIONS" | sed 's/^/{"include":[/g')

        # # Add ending
        # ADD_END=$(echo "$ADD_BEGINNING" | sed 's/$/]}/g')

        # # Minimize json
        # MINIMIZED_MATRIX=$(echo "$ADD_END" | jq -c .)

        # # Print out minimized json
        # echo "Minimized matrix is: $MINIMIZED_MATRIX"

        # # Set output variable to be used in matrix strategy
        # echo "MATRIX=$MINIMIZED_MATRIX" >> $GITHUB_OUTPUT
          
  
  # gather-info:
  #   name: TF Batch Gather Info
  #   runs-on: ubuntu-latest
  #   outputs:
  #     MAX_PARALLEL_DEPLOY: ${{ steps.set-deploy-strategy.outputs.MAX_PARALLEL_DEPLOY }}
  #     MATRIX: ${{ steps.set-pod-selection.outputs.MATRIX }}

  #   steps:
  #   - uses: actions/checkout@v3
    
  #   - name: Define deploy strategy
  #     id: set-deploy-strategy
  #     run: |
  #       # If strategy is concurrent, max parallel is set to 100 (arbitrarily high number)
  #       if [[ ${{ github.event.inputs.strategy }} == "concurrent" ]]; then
  #         echo "Concurrent deployment strategy selected, max parallel set to 100"
  #         echo "MAX_PARALLEL_DEPLOY=100" >> $GITHUB_OUTPUT

  #       # If strategy is sequential, max parallel is set to 1
  #       elif [[ ${{ github.event.inputs.strategy }} == "sequential" ]]; then
  #         echo "Concurrent deployment strategy selected, max parallel set to 100"
  #         echo "MAX_PARALLEL_DEPLOY=1" >> $GITHUB_OUTPUT
  #       fi

  #   - name: Specify pods to deploy
  #     id: set-pod-selection
  #     run: |
        
  #       ###
  #       ## Because I can't figure out how to make synthetic json with jq, I'm going to do it the hard way
  #       ## This is an awful hack, and should be replaced with a sane solution
  #       ###

  #       # Make an array object
  #       ALL_PODS=$(ls -l data/ | grep -Ev 'total' | rev | cut -d " " -f1 | rev | cut -d "." -f 1)

  #       # Filter PODS using regex
  #       # If wildcard used to select all pods, select all PODS
  #       if [[ -n ${{ github.event.inputs.pod-selection-regex }} ]]; then
  #         echo "Filtering pods with regex ${{ github.event.inputs.pod-selection-regex }}"
  #         ALL_PODS=$(echo "$ALL_PODS" | grep -E "${{ github.event.inputs.pod-selection-regex }}" )
  #       fi
        
  #       # Iterate over the array with while, build pseudo-json
  #       rm tmp.json
  #       while IFS=$'\n' read -r POD; do
  #         echo "{\"location\":\"$POD\"}" >> tmp.json
  #       done <<< "$ALL_PODS"
        
  #       # Read the json file back into mem - valid json
  #       SEPARATE_LINES_POD_LOCATIONS=$(cat tmp.json| tr -d "\r\n" | sed -e 's/}{/},{/g')
        
  #       # Add string to beginning of comma join string
  #       ADD_BEGINNING=$(echo "$SEPARATE_LINES_POD_LOCATIONS" | sed 's/^/{"include":[/g')
        
  #       # Add ending
  #       ADD_END=$(echo "$ADD_BEGINNING" | sed 's/$/]}/g')

  #       # Minimize json
  #       MINIMIZED_MATRIX=$(echo "$ADD_END" | jq -c .)

  #       # Print out minimized json
  #       echo "Minimized matrix is: $MINIMIZED_MATRIX"

  #       # Set output variable to be used in matrix strategy
  #       echo "MATRIX=$MINIMIZED_MATRIX" >> $GITHUB_OUTPUT

# Batch deploy using dynamic matrix of jobs - this would be useful if we want to monitor the jobs
  # batch-deploy:
  #   name: TF Batch Gather Info
  #   needs: gather-info
  #   runs-on: ubuntu-latest
  #   environment: pod-deployment # Requires approval to start
  #   strategy: 
  #     max-parallel: ${{ fromJSON(needs.gather-info.outputs.MAX_PARALLEL_DEPLOY) }}
  #     matrix: ${{fromJSON(needs.gather-info.outputs.MATRIX)}}

  #   steps:
  #     - name: Trigger TF Deploy Job
  #       run: |
  #         # Print the location of the pod to be deployed
  #         echo "Deploying pod ${{ matrix.location }}"  
        
